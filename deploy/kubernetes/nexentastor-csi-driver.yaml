# NexentaStor CSI Driver (master)
#
# This driver version works with Kubernetes version >=1.14
#
# In production, each CSI driver deployment has to be customized to avoid conflicts,
# use non-default namespace and different names for non-namespaced entities like the ClusterRole
#
# Install to Kubernetes:
# $ kubectl apply -f deploy/kubernetes/nexentastor-csi-driver.yaml
#


# ----------------------
# NexentaStor CSI Driver
# ----------------------

apiVersion: storage.k8s.io/v1beta1 #k8s =>1.14
kind: CSIDriver
metadata:
  name: nexentastor-csi-driver.nexenta.com
spec:
  attachRequired: false
  podInfoOnMount: false
---


# ---------------------------------
# NexentaStor CSI Controller Server
# ---------------------------------
#
# Runs single driver controller server (driver + provisioner + attacher + snapshotter) on one of the nodes
#

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nexentastor-csi-controller-service-account
  namespace: default # replace with non-default namespace name if needed
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nexentastor-csi-controller-cluster-role
rules:
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list']
  - apiGroups: ['']
    resources: ['persistentvolumes']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'delete'] # "update" for attacher
  - apiGroups: ['']
    resources: ['persistentvolumeclaims']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: ['storage.k8s.io']
    resources: ['storageclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['']
    resources: ['events']
    verbs: ['list', 'watch', 'create', 'update', 'patch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshots']
    verbs: ['get', 'list']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotcontents']
    verbs: ['get', 'list']
  # attacher specific
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['csi.storage.k8s.io']
    resources: ['csinodeinfos']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['storage.k8s.io']
    resources: ['volumeattachments']
    verbs: ['get', 'list', 'watch', 'update']
  # snapshotter specific
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshotcontents']
    verbs: ['create', 'get', 'list', 'watch', 'update', 'delete']
  - apiGroups: ['snapshot.storage.k8s.io']
    resources: ['volumesnapshots']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: ['apiextensions.k8s.io']
    resources: ['customresourcedefinitions']
    verbs: ['create', 'list', 'watch', 'delete']
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nexentastor-csi-controller-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: nexentastor-csi-controller-service-account
    namespace: default # replace with non-default namespace name if needed
roleRef:
  kind: ClusterRole
  name: nexentastor-csi-controller-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

kind: Service
apiVersion: v1
metadata:
  name: nexentastor-csi-controller
  labels:
    app: nexentastor-csi-controller
spec:
  selector:
    app: nexentastor-csi-controller
  ports:
    - name: dummy
      port: 12345
---

kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: nexentastor-csi-controller
spec:
  serviceName: nexentastor-csi-controller
  replicas: 1
  selector:
    matchLabels:
      app: nexentastor-csi-controller # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: nexentastor-csi-controller
    spec:
      serviceAccount: nexentastor-csi-controller-service-account
      containers:
        # csi-provisioner: sidecar container that watches Kubernetes PersistentVolumeClaim objects
        # and triggers CreateVolume/DeleteVolume against a CSI endpoint
        - name: csi-provisioner
          image: quay.io/k8scsi/csi-provisioner:v1.4.0
          imagePullPolicy: IfNotPresent
          args:
            - --connection-timeout=25s
            - --provisioner=nexentastor-csi-driver.nexenta.com
            - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
            - --volume-name-prefix=pvc-ns
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy
        # csi-attacher: sidecar container that watches Kubernetes VolumeAttachment objects
        # and triggers ControllerPublish/Unpublish against a CSI endpoint
        # - name: csi-attacher
        #   image: quay.io/k8scsi/csi-attacher:v1.2.0
        #   imagePullPolicy: IfNotPresent
        #   args:
        #     - --v=3
        #     - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
        #   volumeMounts:
        #     - name: socket-dir
        #       mountPath: /var/lib/csi/sockets/pluginproxy
        - name: csi-snapshotter
          image: quay.io/k8scsi/csi-snapshotter:v1.1.0 # v1.2.0 doesn't work
          imagePullPolicy: IfNotPresent
          args:
            - --connection-timeout=25s
            - --csi-address=/var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy
        - name: driver
          image: nexenta/nexentastor-csi-driver:master
          imagePullPolicy: IfNotPresent
          args:
            - --nodeid=$(KUBE_NODE_NAME)
            - --endpoint=unix://csi/csi.sock
            - --role=controller
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: secret
              mountPath: /config
              readOnly: true
      volumes:
        - name: socket-dir
          emptyDir:
        - name: secret
          secret:
            secretName: nexentastor-csi-driver-config
---


# ---------------------------
# NexentaStor CSI Node Server
# ---------------------------
#
# Runs driver node server (driver + registrar) on each node
#

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nexentastor-csi-node-service-account
  namespace: default # replace with non-default namespace name if needed
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nexentastor-csi-node-cluster-role
rules:
  - apiGroups: ['']
    resources: ['events']
    verbs: ['get', 'list', 'watch', 'create', 'update', 'patch']
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nexentastor-csi-node-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: nexentastor-csi-node-service-account
    namespace: default # replace with non-default namespace name if needed
roleRef:
  kind: ClusterRole
  name: nexentastor-csi-node-cluster-role
  apiGroup: rbac.authorization.k8s.io
---

# NexentaStor Node Server as a daemon

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: nexentastor-csi-node
spec:
  selector:
    matchLabels:
      app: nexentastor-csi-node
  template:
    metadata:
      labels:
        app: nexentastor-csi-node
    spec:
      serviceAccount: nexentastor-csi-node-service-account
      hostNetwork: true
      containers:
        # driver-registrar: sidecar container that:
        # 1) registers the CSI driver with kubelet
        # 2) adds the drivers custom NodeId to a label on the Kubernetes Node API Object
        - name: driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.1.0
          imagePullPolicy: IfNotPresent
          args:
            - --v=3
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=/var/lib/kubelet/plugins_registry/nexentastor-csi-driver.nexenta.com/csi.sock
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        - name: driver
          securityContext:
            privileged: true
            capabilities:
              add: ['SYS_ADMIN']
            allowPrivilegeEscalation: true
          image: nexenta/nexentastor-csi-driver:master
          imagePullPolicy: IfNotPresent
          args:
            - --nodeid=$(KUBE_NODE_NAME)
            - --endpoint=unix://csi/csi.sock
            - --role=node
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: secret
              mountPath: /config
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/nexentastor-csi-driver.nexenta.com
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: secret
          secret:
            secretName: nexentastor-csi-driver-config
---
